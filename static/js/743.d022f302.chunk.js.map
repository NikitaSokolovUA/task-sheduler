{"version":3,"file":"static/js/743.d022f302.chunk.js","mappings":"uKACA,MAA4B,0B,SCCfA,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OAAO,iBAAMC,UAAWC,EAAjB,SAAiCF,GACzC,C,+ECGYG,EAAU,WAKrB,MAAO,CACLC,YALiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAM7BC,cALmBF,EAAAA,EAAAA,IAAYG,EAAAA,IAM/BC,MALWJ,EAAAA,EAAAA,IAAYK,EAAAA,IAO1B,C,iHCTKC,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,SAAS,YAC5BC,MAAOJ,EAAAA,KAAaI,MAAM,iBAAiBD,SAAS,YACpDE,SAAUL,EAAAA,KAAaG,WAAWG,IAAI,EAAG,mBAsC7C,UAnCqB,WACjB,IAAOd,GAAaD,EAAAA,EAAAA,KAAbC,WACDe,GAAWC,EAAAA,EAAAA,MAWjB,OAAO,UAAC,IAAD,WACFhB,IAAc,SAAC,KAAD,CAAUiB,GAAG,SAASC,SAAS,KAC9C,SAAC,KAAD,CACIC,cAbc,CAClBT,KAAM,GACNE,MAAO,GACPC,SAAU,IAWNO,iBAAkBb,EAClBc,SAVa,SAACF,EAAD,GAAmC,IAAjBG,EAAgB,EAAhBA,UACnCP,GAASQ,EAAAA,EAAAA,IAAaJ,IACtBG,GACH,EAIG,UAII,UAAC,KAAD,YACI,qCACA,SAAC,KAAD,CAAOE,KAAK,OAAOd,KAAK,UACxB,SAAC,KAAD,CAAcA,KAAK,UACnB,kCACA,SAAC,KAAD,CAAOc,KAAK,QAAQd,KAAK,WACzB,SAAC,KAAD,CAAcA,KAAK,WACnB,qCACA,SAAC,KAAD,CAAOc,KAAK,OAAOd,KAAK,cACxB,SAAC,KAAD,CAAcA,KAAK,cACnB,mBAAQc,KAAK,SAAb,mCAIf,C,wGC/CM,IAAMlB,EAAa,SAAAmB,GAAK,OAAIA,EAAMC,KAAKrB,IAAf,EAClBH,EAAmB,SAAAuB,GAAK,OAAIA,EAAMC,KAAK1B,UAAf,EACxBI,EAAqB,SAAAqB,GAAK,OAAGA,EAAMC,KAAKvB,YAAd,C","sources":["webpack://react-homework-template/./src/components/Layout/Layout.module.css?3701","components/Layout/Layout.js","hooks/useAuth.js","pages/Registration.js","redux/auth/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Layout_container__dVyML\"};","import css from \"./Layout.module.css\";\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectUser,\n  selectIsLoggedIn,\n  selectIsRefreshing,\n} from 'redux/auth/selectors';\n\nexport const useAuth = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const user = useSelector(selectUser);\n\n  return {\n    isLoggedIn,\n    isRefreshing,\n    user,\n  };\n};","import { Field, Formik, Form, ErrorMessage } from \"formik\"\nimport * as yup from 'yup';\nimport { Layout } from \"components/Layout/Layout\"\nimport { useDispatch } from \"react-redux\";\nimport { registration } from \"redux/auth/operations\";\nimport { useAuth } from \"hooks/useAuth\";\nimport { Navigate } from \"react-router-dom\";\n\nconst schema = yup.object().shape({\n    name: yup.string().required('Required'),\n    email: yup.string().email('Invalid email').required('Required'),\n    password: yup.string().required().min(8, 'Min 8 symbols')\n})\n\nconst Registration = () => {\n    const {isLoggedIn} =useAuth()\n    const dispatch = useDispatch()\n    const initialValues = {\n        name: \"\",\n        email: '',\n        password: '',\n    }\n    const handleSubmit = (initialValues, { resetForm }) => {\n        dispatch(registration(initialValues))\n        resetForm()        \n    }\n\n    return <Layout>\n        {isLoggedIn && <Navigate to=\"/tasks\" replace={true}/>}\n        <Formik\n            initialValues={initialValues}\n            validationSchema={schema}\n            onSubmit={handleSubmit}>\n            <Form>\n                <p>Username</p>\n                <Field type='text' name='name' />\n                <ErrorMessage name=\"name\"/>\n                <p>Email</p>\n                <Field type='email' name='email' />\n                <ErrorMessage name=\"email\"/>\n                <p>Password</p>\n                <Field type='text' name='password' />\n                <ErrorMessage name=\"password\"/>\n                <button type=\"submit\"> Registration </button>\n            </Form>\n        </Formik>\n    </Layout>\n}\n\nexport default  Registration","export const selectUser = state => state.auth.user\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn\nexport const selectIsRefreshing = state=> state.auth.isRefreshing"],"names":["Layout","children","className","css","useAuth","isLoggedIn","useSelector","selectIsLoggedIn","isRefreshing","selectIsRefreshing","user","selectUser","schema","yup","shape","name","required","email","password","min","dispatch","useDispatch","to","replace","initialValues","validationSchema","onSubmit","resetForm","registration","type","state","auth"],"sourceRoot":""}